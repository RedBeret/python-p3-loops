[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "happy_new_year",
        "importPath": "looping",
        "description": "looping",
        "isExtraImport": true,
        "detail": "looping",
        "documentation": {}
    },
    {
        "label": "square_integers",
        "importPath": "looping",
        "description": "looping",
        "isExtraImport": true,
        "detail": "looping",
        "documentation": {}
    },
    {
        "label": "fizzbuzz",
        "importPath": "looping",
        "description": "looping",
        "isExtraImport": true,
        "detail": "looping",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-loops\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-loops\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-loops\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-loops\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-loops\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "pytest_itemcollected",
        "kind": 2,
        "importPath": "lib.testing.conftest",
        "description": "lib.testing.conftest",
        "peekOfCode": "def pytest_itemcollected(item):\n    par = item.parent.obj\n    node = item.obj\n    pref = par.__doc__.strip() if par.__doc__ else par.__class__.__name__\n    suf = node.__doc__.strip() if node.__doc__ else node.__name__\n    if pref or suf:\n        item._nodeid = ' '.join((pref, suf))",
        "detail": "lib.testing.conftest",
        "documentation": {}
    },
    {
        "label": "TestHappyNewYear",
        "kind": 6,
        "importPath": "lib.testing.looping_test",
        "description": "lib.testing.looping_test",
        "peekOfCode": "class TestHappyNewYear:\n    '''happy_new_year() in looping.py'''\n    def test_prints_10_to_1_hny(self):\n        '''prints 10 to 1 countdown then \"Happy New Year!\"'''\n        captured_out = io.StringIO()\n        sys.stdout = captured_out\n        happy_new_year()\n        sys.stdout = sys.__stdout__\n        answer = captured_out.getvalue()\n        #answer.split(\\n) produces a list that ends in ''",
        "detail": "lib.testing.looping_test",
        "documentation": {}
    },
    {
        "label": "TestSquareIntegers",
        "kind": 6,
        "importPath": "lib.testing.looping_test",
        "description": "lib.testing.looping_test",
        "peekOfCode": "class TestSquareIntegers:\n    '''square_integers() in looping.py'''\n    def test_square_integers(self):\n        '''returns squared ints for [1, 2, 3, 4, 5] and [-1, -2, -3, -4, -5]'''\n        assert(square_integers([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25])\n        assert(square_integers([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25])\nclass TestFizzBuzz:\n    '''fizzbuzz() in looping.py'''\n    def test_prints_1_to_100_fizzbuzz(self):\n        '''prints 1 to 100 with fizz 3s, buzz 5s, fizzbuzz 3and5s'''",
        "detail": "lib.testing.looping_test",
        "documentation": {}
    },
    {
        "label": "TestFizzBuzz",
        "kind": 6,
        "importPath": "lib.testing.looping_test",
        "description": "lib.testing.looping_test",
        "peekOfCode": "class TestFizzBuzz:\n    '''fizzbuzz() in looping.py'''\n    def test_prints_1_to_100_fizzbuzz(self):\n        '''prints 1 to 100 with fizz 3s, buzz 5s, fizzbuzz 3and5s'''\n        captured_out = io.StringIO()\n        sys.stdout = captured_out\n        fizzbuzz()\n        sys.stdout = sys.__stdout__\n        answer = captured_out.getvalue()\n        assert len(answer) != 0, \"Nothing printed! Check your loop condition. Also do you have print statements?\"",
        "detail": "lib.testing.looping_test",
        "documentation": {}
    },
    {
        "label": "happy_new_year",
        "kind": 2,
        "importPath": "lib.looping",
        "description": "lib.looping",
        "peekOfCode": "def happy_new_year():\n    counter = 10\n    while counter > 0:\n        print(counter)\n        counter -= 1\n    print(\"Happy New Year!\")\ndef square_integers(int_list):\n     return [num ** 2 for num in int_list]\ndef fizzbuzz():\n    for num in range(1, 101):",
        "detail": "lib.looping",
        "documentation": {}
    },
    {
        "label": "square_integers",
        "kind": 2,
        "importPath": "lib.looping",
        "description": "lib.looping",
        "peekOfCode": "def square_integers(int_list):\n     return [num ** 2 for num in int_list]\ndef fizzbuzz():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")",
        "detail": "lib.looping",
        "documentation": {}
    },
    {
        "label": "fizzbuzz",
        "kind": 2,
        "importPath": "lib.looping",
        "description": "lib.looping",
        "peekOfCode": "def fizzbuzz():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)",
        "detail": "lib.looping",
        "documentation": {}
    }
]